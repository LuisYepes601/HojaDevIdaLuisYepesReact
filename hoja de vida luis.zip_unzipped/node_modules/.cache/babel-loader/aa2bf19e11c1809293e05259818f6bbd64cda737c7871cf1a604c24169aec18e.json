{"ast":null,"code":"// Servicio API real para CRUD de experiencias profesionales\n\n// 🔹 URL base de la API\nconst API_BASE_URL = 'https://hojadevidaapi.onrender.com/api';\n\n// 🔹 Obtener todas las experiencias\nexport const getExperiences = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias`);\n    if (!response.ok) {\n      throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Error en getExperiences:\", error);\n    throw error;\n  }\n};\n\n// 🔹 Obtener experiencias por usuario\nexport const getExperiencesByUser = async usuarioReferencia => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias/usuario/${usuarioReferencia}`);\n    if (!response.ok) throw new Error('Error al obtener las experiencias del usuario');\n    return await response.json();\n  } catch (error) {\n    console.error('❌ Error en getExperiencesByUser:', error);\n    throw error;\n  }\n};\n\n// 🔹 Crear una nueva experiencia\nexport const createExperience = async experienceData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias/crear`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(experienceData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error al crear experiencia: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Error en createExperience:\", error);\n    throw error;\n  }\n};\n\n// 🔹 Actualizar una experiencia existente\nexport const updateExperience = async (_id, experienceData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias/actualizar/${_id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(experienceData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error al actualizar experiencia: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Error en updateExperience:\", error);\n    throw error;\n  }\n};\nconst handleDelete = async _id => {\n  if (window.confirm('¿Estás seguro de que quieres eliminar esta experiencia?')) {\n    try {\n      setError(null);\n      console.log('Deleting experience with ID:', _id); // depuración\n      await deleteExperience(_id);\n      await loadExperiences();\n    } catch (err) {\n      setError(err.message || 'Error al eliminar la experiencia');\n      console.error('Error deleting experience:', err);\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getExperiences","response","fetch","ok","Error","status","statusText","json","error","console","getExperiencesByUser","usuarioReferencia","createExperience","experienceData","method","headers","body","JSON","stringify","updateExperience","_id","handleDelete","window","confirm","setError","log","deleteExperience","loadExperiences","err","message"],"sources":["C:/Users/Usuario/Downloads/hoja de vida luis.zip_unzipped/hoja de vida luis.zip_unzipped/src/services/apiService.js"],"sourcesContent":["// Servicio API real para CRUD de experiencias profesionales\n\n// 🔹 URL base de la API\nconst API_BASE_URL = 'https://hojadevidaapi.onrender.com/api';\n\n// 🔹 Obtener todas las experiencias\nexport const getExperiences = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias`);\n    if (!response.ok) {\n      throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Error en getExperiences:\", error);\n    throw error;\n  }\n};\n\n// 🔹 Obtener experiencias por usuario\nexport const getExperiencesByUser = async (usuarioReferencia) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias/usuario/${usuarioReferencia}`);\n    if (!response.ok) throw new Error('Error al obtener las experiencias del usuario');\n    return await response.json();\n  } catch (error) {\n    console.error('❌ Error en getExperiencesByUser:', error);\n    throw error;\n  }\n};\n\n// 🔹 Crear una nueva experiencia\nexport const createExperience = async (experienceData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias/crear`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(experienceData),\n    });\n    if (!response.ok) {\n      throw new Error(`Error al crear experiencia: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Error en createExperience:\", error);\n    throw error;\n  }\n};\n\n// 🔹 Actualizar una experiencia existente\nexport const updateExperience = async (_id, experienceData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/experiencias/actualizar/${_id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(experienceData),\n    });\n    if (!response.ok) {\n      throw new Error(`Error al actualizar experiencia: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Error en updateExperience:\", error);\n    throw error;\n  }\n};\n\n\nconst handleDelete = async (_id) => {\n  if (window.confirm('¿Estás seguro de que quieres eliminar esta experiencia?')) {\n    try {\n      setError(null);\n      console.log('Deleting experience with ID:', _id); // depuración\n      await deleteExperience(_id);\n      await loadExperiences();\n    } catch (err) {\n      setError(err.message || 'Error al eliminar la experiencia');\n      console.error('Error deleting experience:', err);\n    }\n  }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}