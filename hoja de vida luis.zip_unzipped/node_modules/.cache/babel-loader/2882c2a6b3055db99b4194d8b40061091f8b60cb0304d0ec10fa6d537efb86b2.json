{"ast":null,"code":"// API service for professional experiences CRUD operations\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// For development/testing, you can use mock data if no API is available\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\nconsole.log('API Base URL:', API_BASE_URL);\nconsole.log('Using mock data:', USE_MOCK_DATA);\n\n// Mock data for development\nconst mockExperiences = [{\n  id: 1,\n  company: 'Empresa Ejemplo',\n  position: 'Desarrollador Full Stack',\n  location: 'Bogotá, Colombia',\n  startDate: '2023-01-01',\n  endDate: null,\n  current: true,\n  description: 'Desarrollo de aplicaciones web modernas utilizando React, Node.js y bases de datos NoSQL.',\n  technologies: ['React', 'Node.js', 'MongoDB', 'Express']\n}, {\n  id: 2,\n  company: 'Tech Solutions',\n  position: 'Desarrollador Frontend',\n  location: 'Medellín, Colombia',\n  startDate: '2022-06-01',\n  endDate: '2022-12-31',\n  current: false,\n  description: 'Creación de interfaces de usuario responsivas y optimizadas para rendimiento.',\n  technologies: ['HTML', 'CSS', 'JavaScript', 'Vue.js']\n}];\nexport const getExperiences = async () => {\n  if (USE_MOCK_DATA) {\n    console.log('Using mock data for experiences');\n    return new Promise(resolve => {\n      setTimeout(() => resolve(mockExperiences), 500); // Simulate API delay\n    });\n  }\n  console.log('Fetching experiences from:', `${API_BASE_URL}/experiences`);\n  const response = await fetch(`${API_BASE_URL}/experiences`);\n  console.log('Response status:', response.status);\n  if (!response.ok) {\n    throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n  }\n  const data = await response.json();\n  console.log('Fetched experiences:', data);\n  return data;\n};\nexport const createExperience = async experienceData => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock creating experience:', experienceData);\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        ...experienceData,\n        id: Date.now()\n      }), 500);\n    });\n  }\n  const response = await fetch(`${API_BASE_URL}/experiences`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(experienceData)\n  });\n  if (!response.ok) {\n    throw new Error('Error al crear experiencia');\n  }\n  return response.json();\n};\nexport const updateExperience = async (id, experienceData) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock updating experience:', id, experienceData);\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        ...experienceData,\n        id\n      }), 500);\n    });\n  }\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(experienceData)\n  });\n  if (!response.ok) {\n    throw new Error('Error al actualizar experiencia');\n  }\n  return response.json();\n};\nexport const deleteExperience = async id => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock deleting experience:', id);\n    return new Promise(resolve => {\n      setTimeout(() => resolve({\n        success: true\n      }), 500);\n    });\n  }\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Error al eliminar experiencia');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_DATA","REACT_APP_USE_MOCK_DATA","console","log","mockExperiences","id","company","position","location","startDate","endDate","current","description","technologies","getExperiences","Promise","resolve","setTimeout","response","fetch","status","ok","Error","statusText","data","json","createExperience","experienceData","Date","now","method","headers","body","JSON","stringify","updateExperience","deleteExperience","success"],"sources":["C:/Users/USUARIO/OneDrive/Desktop/luis pagina web react/hoja de vida luis.zip_unzipped/src/services/apiService.js"],"sourcesContent":["// API service for professional experiences CRUD operations\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// For development/testing, you can use mock data if no API is available\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\nconsole.log('API Base URL:', API_BASE_URL);\nconsole.log('Using mock data:', USE_MOCK_DATA);\n\n// Mock data for development\nconst mockExperiences = [\n  {\n    id: 1,\n    company: 'Empresa Ejemplo',\n    position: 'Desarrollador Full Stack',\n    location: 'Bogotá, Colombia',\n    startDate: '2023-01-01',\n    endDate: null,\n    current: true,\n    description: 'Desarrollo de aplicaciones web modernas utilizando React, Node.js y bases de datos NoSQL.',\n    technologies: ['React', 'Node.js', 'MongoDB', 'Express']\n  },\n  {\n    id: 2,\n    company: 'Tech Solutions',\n    position: 'Desarrollador Frontend',\n    location: 'Medellín, Colombia',\n    startDate: '2022-06-01',\n    endDate: '2022-12-31',\n    current: false,\n    description: 'Creación de interfaces de usuario responsivas y optimizadas para rendimiento.',\n    technologies: ['HTML', 'CSS', 'JavaScript', 'Vue.js']\n  }\n];\n\nexport const getExperiences = async () => {\n  if (USE_MOCK_DATA) {\n    console.log('Using mock data for experiences');\n    return new Promise((resolve) => {\n      setTimeout(() => resolve(mockExperiences), 500); // Simulate API delay\n    });\n  }\n\n  console.log('Fetching experiences from:', `${API_BASE_URL}/experiences`);\n  const response = await fetch(`${API_BASE_URL}/experiences`);\n  console.log('Response status:', response.status);\n  if (!response.ok) {\n    throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n  }\n  const data = await response.json();\n  console.log('Fetched experiences:', data);\n  return data;\n};\n\nexport const createExperience = async (experienceData) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock creating experience:', experienceData);\n    return new Promise((resolve) => {\n      setTimeout(() => resolve({ ...experienceData, id: Date.now() }), 500);\n    });\n  }\n\n  const response = await fetch(`${API_BASE_URL}/experiences`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(experienceData),\n  });\n  if (!response.ok) {\n    throw new Error('Error al crear experiencia');\n  }\n  return response.json();\n};\n\nexport const updateExperience = async (id, experienceData) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock updating experience:', id, experienceData);\n    return new Promise((resolve) => {\n      setTimeout(() => resolve({ ...experienceData, id }), 500);\n    });\n  }\n\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(experienceData),\n  });\n  if (!response.ok) {\n    throw new Error('Error al actualizar experiencia');\n  }\n  return response.json();\n};\n\nexport const deleteExperience = async (id) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock deleting experience:', id);\n    return new Promise((resolve) => {\n      setTimeout(() => resolve({ success: true }), 500);\n    });\n  }\n\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n    throw new Error('Error al eliminar experiencia');\n  }\n  return response.json();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}