{"ast":null,"code":"// API service for professional experiences CRUD operations\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// For development/testing, you can use mock data if no API is available\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\nconsole.log('API Base URL:', API_BASE_URL);\nconsole.log('Using mock data:', USE_MOCK_DATA);\nexport const getExperiences = async () => {\n  console.log('Fetching experiences from:', `${API_BASE_URL}/experiences`);\n  const response = await fetch(`${API_BASE_URL}/experiences`);\n  console.log('Response status:', response.status);\n  if (!response.ok) {\n    throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n  }\n  const data = await response.json();\n  console.log('Fetched experiences:', data);\n  return data;\n};\nexport const createExperience = async experienceData => {\n  const response = await fetch(`${API_BASE_URL}/experiences`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(experienceData)\n  });\n  if (!response.ok) {\n    throw new Error('Error al crear experiencia');\n  }\n  return response.json();\n};\nexport const updateExperience = async (id, experienceData) => {\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(experienceData)\n  });\n  if (!response.ok) {\n    throw new Error('Error al actualizar experiencia');\n  }\n  return response.json();\n};\nexport const deleteExperience = async id => {\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Error al eliminar experiencia');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_DATA","REACT_APP_USE_MOCK_DATA","console","log","getExperiences","response","fetch","status","ok","Error","statusText","data","json","createExperience","experienceData","method","headers","body","JSON","stringify","updateExperience","id","deleteExperience"],"sources":["C:/Users/USUARIO/OneDrive/Desktop/luis pagina web react/hoja de vida luis.zip_unzipped/src/services/apiService.js"],"sourcesContent":["// API service for professional experiences CRUD operations\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// For development/testing, you can use mock data if no API is available\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\nconsole.log('API Base URL:', API_BASE_URL);\nconsole.log('Using mock data:', USE_MOCK_DATA);\n\nexport const getExperiences = async () => {\n  console.log('Fetching experiences from:', `${API_BASE_URL}/experiences`);\n  const response = await fetch(`${API_BASE_URL}/experiences`);\n  console.log('Response status:', response.status);\n  if (!response.ok) {\n    throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n  }\n  const data = await response.json();\n  console.log('Fetched experiences:', data);\n  return data;\n};\n\nexport const createExperience = async (experienceData) => {\n  const response = await fetch(`${API_BASE_URL}/experiences`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(experienceData),\n  });\n  if (!response.ok) {\n    throw new Error('Error al crear experiencia');\n  }\n  return response.json();\n};\n\nexport const updateExperience = async (id, experienceData) => {\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(experienceData),\n  });\n  if (!response.ok) {\n    throw new Error('Error al actualizar experiencia');\n  }\n  return response.json();\n};\n\nexport const deleteExperience = async (id) => {\n  const response = await fetch(`${API_BASE_URL}/experiences/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) {\n    throw new Error('Error al eliminar experiencia');\n  }\n  return response.json();\n};\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB,KAAK,MAAM;AAEpEC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEP,YAAY,CAAC;AAC1CM,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,aAAa,CAAC;AAE9C,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxCF,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE,GAAGP,YAAY,cAAc,CAAC;EACxE,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,cAAc,CAAC;EAC3DM,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,QAAQ,CAACE,MAAM,CAAC;EAChD,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkCJ,QAAQ,CAACE,MAAM,IAAIF,QAAQ,CAACK,UAAU,EAAE,CAAC;EAC7F;EACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClCV,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEQ,IAAI,CAAC;EACzC,OAAOA,IAAI;AACb,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAOC,cAAc,IAAK;EACxD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,cAAc,EAAE;IAC1DmB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,cAAc;EACrC,CAAC,CAAC;EACF,IAAI,CAACT,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EACA,OAAOJ,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAOC,EAAE,EAAEP,cAAc,KAAK;EAC5D,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,gBAAgByB,EAAE,EAAE,EAAE;IAChEN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,cAAc;EACrC,CAAC,CAAC;EACF,IAAI,CAACT,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpD;EACA,OAAOJ,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMU,gBAAgB,GAAG,MAAOD,EAAE,IAAK;EAC5C,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,YAAY,gBAAgByB,EAAE,EAAE,EAAE;IAChEN,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACV,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;EACA,OAAOJ,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}