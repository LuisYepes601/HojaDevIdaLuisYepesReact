{"ast":null,"code":"// Servicio API real para CRUD de experiencias profesionales\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Si quieres usar datos falsos durante desarrollo, define en tu .env: REACT_APP_USE_MOCK_DATA=true\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\nconsole.log('游깷 API Base URL:', API_BASE_URL);\nconsole.log('游빍 Using mock data:', USE_MOCK_DATA);\n\n// Datos simulados (opcional)\nconst mockExperiences = [{\n  _id: '1',\n  titulo: 'Desarrollador Full Stack',\n  empresa: 'Copy Foto',\n  periodo: 'Enero 2023 - Octubre 2025',\n  ubicacion: 'Medell칤n, Colombia',\n  descripcion: 'Desarrollo de aplicaciones web modernas.',\n  logros: 'Implementaci칩n de API REST y dise침o responsivo.',\n  tecnologias: 'React, Node.js, MongoDB, Express',\n  usuarioReferencia: '68f663330061790d3bb8b23a',\n  fechaRegistro: '2025-10-22T16:22:52.117Z'\n}];\n\n// 游댳 Obtener todas las experiencias\nexport const getExperiences = async () => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: devolviendo experiencias falsas');\n    return new Promise(resolve => setTimeout(() => resolve(mockExperiences), 500));\n  }\n  const response = await fetch(`${API_BASE_URL}/experiencias`);\n  if (!response.ok) {\n    throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// 游댳 Crear una nueva experiencia\nexport const createExperience = async experienceData => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: creando experiencia', experienceData);\n    return new Promise(resolve => setTimeout(() => resolve({\n      ...experienceData,\n      _id: Date.now().toString()\n    }), 500));\n  }\n  const response = await fetch(`${API_BASE_URL}/experiencias`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(experienceData)\n  });\n  if (!response.ok) throw new Error('Error al crear experiencia');\n  return response.json();\n};\n\n// 游댳 Actualizar una experiencia existente\nexport const updateExperience = async (_id, experienceData) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: actualizando experiencia', _id);\n    return new Promise(resolve => setTimeout(() => resolve({\n      ...experienceData,\n      _id\n    }), 500));\n  }\n  const response = await fetch(`${API_BASE_URL}/experiencias/${_id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(experienceData)\n  });\n  if (!response.ok) throw new Error('Error al actualizar experiencia');\n  return response.json();\n};\n\n// 游댳 Eliminar una experiencia\nexport const deleteExperience = async _id => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: eliminando experiencia', _id);\n    return new Promise(resolve => setTimeout(() => resolve({\n      success: true\n    }), 500));\n  }\n  const response = await fetch(`${API_BASE_URL}/experiencias/${_id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) throw new Error('Error al eliminar experiencia');\n  return response.json();\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","USE_MOCK_DATA","REACT_APP_USE_MOCK_DATA","console","log","mockExperiences","_id","titulo","empresa","periodo","ubicacion","descripcion","logros","tecnologias","usuarioReferencia","fechaRegistro","getExperiences","Promise","resolve","setTimeout","response","fetch","ok","Error","status","statusText","json","createExperience","experienceData","Date","now","toString","method","headers","body","JSON","stringify","updateExperience","deleteExperience","success"],"sources":["C:/Users/Usuario/Downloads/hoja de vida luis.zip_unzipped/hoja de vida luis.zip_unzipped/src/services/apiService.js"],"sourcesContent":["// Servicio API real para CRUD de experiencias profesionales\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Si quieres usar datos falsos durante desarrollo, define en tu .env: REACT_APP_USE_MOCK_DATA=true\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\nconsole.log('游깷 API Base URL:', API_BASE_URL);\nconsole.log('游빍 Using mock data:', USE_MOCK_DATA);\n\n// Datos simulados (opcional)\nconst mockExperiences = [\n  {\n    _id: '1',\n    titulo: 'Desarrollador Full Stack',\n    empresa: 'Copy Foto',\n    periodo: 'Enero 2023 - Octubre 2025',\n    ubicacion: 'Medell칤n, Colombia',\n    descripcion: 'Desarrollo de aplicaciones web modernas.',\n    logros: 'Implementaci칩n de API REST y dise침o responsivo.',\n    tecnologias: 'React, Node.js, MongoDB, Express',\n    usuarioReferencia: '68f663330061790d3bb8b23a',\n    fechaRegistro: '2025-10-22T16:22:52.117Z',\n  }\n];\n\n// 游댳 Obtener todas las experiencias\nexport const getExperiences = async () => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: devolviendo experiencias falsas');\n    return new Promise((resolve) => setTimeout(() => resolve(mockExperiences), 500));\n  }\n\n  const response = await fetch(`${API_BASE_URL}/experiencias`);\n  if (!response.ok) {\n    throw new Error(`Error al obtener experiencias: ${response.status} ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// 游댳 Crear una nueva experiencia\nexport const createExperience = async (experienceData) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: creando experiencia', experienceData);\n    return new Promise((resolve) =>\n      setTimeout(() => resolve({ ...experienceData, _id: Date.now().toString() }), 500)\n    );\n  }\n\n  const response = await fetch(`${API_BASE_URL}/experiencias`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(experienceData),\n  });\n  if (!response.ok) throw new Error('Error al crear experiencia');\n  return response.json();\n};\n\n// 游댳 Actualizar una experiencia existente\nexport const updateExperience = async (_id, experienceData) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: actualizando experiencia', _id);\n    return new Promise((resolve) =>\n      setTimeout(() => resolve({ ...experienceData, _id }), 500)\n    );\n  }\n\n  const response = await fetch(`${API_BASE_URL}/experiencias/${_id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(experienceData),\n  });\n  if (!response.ok) throw new Error('Error al actualizar experiencia');\n  return response.json();\n};\n\n// 游댳 Eliminar una experiencia\nexport const deleteExperience = async (_id) => {\n  if (USE_MOCK_DATA) {\n    console.log('Mock: eliminando experiencia', _id);\n    return new Promise((resolve) => setTimeout(() => resolve({ success: true }), 500));\n  }\n\n  const response = await fetch(`${API_BASE_URL}/experiencias/${_id}`, { method: 'DELETE' });\n  if (!response.ok) throw new Error('Error al eliminar experiencia');\n  return response.json();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}